#!/bin/bash

# on exit, kill all children
trap 'pkill -P $$' EXIT
LC_ALL=""

fg="#C5C8C6"
yellow="#F0C674"
green="#B5BD68"
red="#A54242"
blue="#81A2BE"

init() {

    [ -d /tmp/bar ] && rm -rf /tmp/bar
    mkdir -p /tmp/bar

    # wait for dwm to start
    while ! pgrep dwm > /dev/null && [ ! -d /tmp/dwm_info ] ; do
        sleep 0.1
    done

    # if zero, bar is disabled
    [ $(< /tmp/dwm_info/bar_height) -eq 0 ] && exit

    # force a dwm update cycle on bar launch
    echo 1 > /tmp/dwm_info/check

    num_ws=$(< /tmp/dwm_info/num_ws)

    local res="$(xrandr --nograb --current | awk '/\*/ {print $1}' | tail -n 1)"
    local res=${res% *}
    local sw=${res%x*}
    local sh=${res#*x}
    local sw=${sw%.*}
    local sh=${sh%.*}

    local gap=$(< /tmp/dwm_info/gappx)

    w=$(( $sw - $gap * 2 ))
    x=$gap
    h=$(< /tmp/dwm_info/bar_height)

    # if gaps, gap the bar
    [ $gap -gt 0 ] && h=$(( $h + ($h / 4) ))

   # if bar on top, set y value to zero
    if [ $(< /tmp/dwm_info/top_bar) -eq 0 ] ; then
        if [ $gap -gt 0 ] ; then
            y=$(echo "$h / 5" | bc -l)
        else
            y=0
        fi
    # otherwise, it should be screenheight minus the bar height
    else
        if [ $gap -gt 0 ] ; then
            y=$(echo "$sh - $h - ($h / 2.5)" | bc -l)
        else
            y=$(( $sh - $h ))
        fi
    fi



    ft1="SauceCodePro Nerd Font:size=10:antialias=true:autohint=true"
    if [ $gap -eq 0 ] ; then
        ft2="Wuncon Siji=10:antialias=true:autohint=true"
        ft3="Wuncon Siji=10:antialias=true:autohint=true"
        ft4="SauceCodePro Nerd Font:size=10:antialias=true:autohint=true"
        ft5="SauceCodePro Nerd Font:size=10:antialias=true:autohint=true"
    else
        ft2="Wuncon Siji=10:antialias=true:autohint=true"
        ft3="Wuncon Siji=10:antialias=true:autohint=true"
        ft4="SauceCodePro Nerd Font:size=10:antialias=true:autohint=true"
        ft5="SauceCodePro Nerd Font:size=10:antialias=true:autohint=true"
    fi
}

layout() {
    case $(< /tmp/dwm_info/current_layout) in
        0) echo -n "\\uf44e" ;; # tiled
        1) echo -n "\\ue28e" ;; # floating
        2) echo -n "\\uf10c" ;; # monocle
        3) echo -n "\\uf009" ;; # grid
        4) echo -n "\\uf04c" ;; # center master
        5) echo -n "\\uf247" ;; # center floating master
        6) echo -n "\\uf302" ;; # fibonacci
        7) echo -n "\\uf037" ;; # top master
    esac 2> /dev/null
}

wksp() {
    if [ $(< /tmp/dwm_info/check) -eq 1 ] ; then
        for i in $(seq $num_ws || jot $num_ws) ; do

            if [ $(< /tmp/dwm_info/ws"$i") -eq 1 ] ; then
                ws=" %{F$color2}$i%{F-} "
            else
                ws=" $i "
            fi

            if [ $(< /tmp/dwm_info/current_ws) -eq $i ] ; then
                ws="%{+u}$ws"
            else
                ws="%{-u}$ws"
            fi

            buffer=$buffer$ws

        done
        echo -n " $buffer " > /tmp/bar/wksp
        echo -n 0 > /tmp/dwm_info/check
    fi 2> /dev/null
}

bvol() {
    tvol="$(< /tmp/bar/vol)"
    case ${tvol%??} in
        10|[5-9]) echo -n "\\uf028 $tvol" ;;
        [1-4]) echo -n "\\uf027 $tvol" ;;
        *) echo -n "\\uf026 $tvol"
    esac
}

vol > /tmp/bar/vol
launch_daemons() {
    # vol daemon
    dash -c 'while true ; do
    vol > /tmp/bar/vol
    sleep 10
    done' > /dev/null 2>&1 &
    # net_daemon
    dash -c 'while true ; do
        pgrep -x openvpn > /dev/null &&
            echo -n "\\uf023 $(cat /tmp/vpn)" > /tmp/bar/vpn ||
            echo -n "\\uf09c None" > /tmp/bar/vpn

        /bin/ping -c 1 -n -q -s 1 -w 10 1.1.1.1 > /dev/null 2>&1 &&
            wifi="\\uf1eb" ||
            wifi="\\uf467"

        ssid="$(dash ssid)"
        [ -n "$ssid" ] &&
            wifi="$wifi $ssid"

        echo -n "$wifi" > /tmp/bar/wifi

        sleep 10
    done' > /dev/null 2>&1 &

    # music daemon
    dash -c 'while true ; do
        if pgrep -x mpv > /dev/null ; then
            tmpsong=$(dash ~/bin/song 60 "")
            echo -n $tmpsong > /tmp/bar/song
        elif [ -f /tmp/bar/song ] ; then
            rm /tmp/bar/song -- > /dev/null 2>&1
        fi
        sleep 3
    done' > /dev/null 2>&1 &

    # mail daemon
    dash -c 'while true ; do
        mail=$(checkmail)
        echo -n "$mail" > /tmp/bar/mail
        sleep 60
    done' > /dev/null 2>&1 &

    # battery_daemon
    dash -c '[ $(dash bperc) = NONE ] && exit ;
        while true ; do
        if $(case $(uname) in
                Linux)   test $(cat /sys/class/power_supply/AC/online) -eq 1 ;;
                OpenBSD) test $(apm -a) -eq 1
            esac)
        then
            bat="\\uf492"
        else
            perc=$(bperc)
            case ${perc%?} in
                [8-9]) bat="%{F$green}\\uf240" ;;
                [6-7]) bat="%{F$green}\\uf241" ;;
                [4-5]) bat="%{F$yellow}\\uf242" ;;
                [2-3]) bat="%{F$yellow}\\uf243" ;;
                [0-1]) bat="%{F$red}\\uf244"
            esac
        fi
        echo -n "$bat" > /tmp/bar/bat

        sleep 15
    done' > /dev/null 2>&1 &

    # time_daemon
    dash -c 'while date "+%a, %I:%M" > /tmp/bar/date
        do sleep 59
    done' &
}

get_bat() {
    if [ -f /tmp/bar/bat ] && [ "$(< /tmp/bar/bat)" != NONE ] ; then
        echo "$(< /tmp/bar/bat)"
    fi
}

get_wifi() {
    if [ -n "$(interface)" ] ; then
        echo "$(< /tmp/bar/wifi)"
    fi
}

get_mail() {
    if [ -f /tmp/bar/mail ] ; then
         mail="$(< /tmp/bar/mail)"
         if [ "$mail" -gt "0" ] ; then
             echo "%{F$red}%{F-}"
         else
             echo ""
         fi
    fi
}

init
launch_daemons

while \
    printf " %s%b%b%b%b%b%b%b%b%s \\n" \
        " $(wksp) $(< /tmp/bar/wksp)%{-u}  " \
        " $(layout)" \
        "%{c} $(< /tmp/bar/date)" \
        "%{r} $(get_wifi)" \
        " $(get_bat)" \
        " $(get_mail)" \
        " $(bvol)"
    do sleep 1
done 2> /dev/null | \

lemonbar -db \
         -f "$ft1" \
         -f "$ft2" \
         -f "$ft3" \
         -f "$ft4" \
         -f "$ft5" \
         -g ${w}x${h}+${x}+${y} \
         -n bar \
         -u 2 \
         -U $color2 \
         -B $color0 \
         -F $color1 \
         -a 0 > /dev/null 2>&1
